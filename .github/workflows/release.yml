name: Release

on:
  push:
    branches:
      - master

jobs:
  tag-and-release:
    name: Tag and Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      tag_created: ${{ steps.tag.outputs.TAG_CREATED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB }}

      - name: Extract version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -1 | sed 's/.*= *//' | sed 's/"//g')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "v${{ steps.get_version.outputs.VERSION }}")
          if [ -z "$TAG_EXISTS" ]; then
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Tag does not exist, will create it"
          else
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Tag already exists, skipping creation"
          fi

      - name: Create and push tag
        id: tag
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          echo "Creating tag v${{ steps.get_version.outputs.VERSION }}"
          git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Release v${{ steps.get_version.outputs.VERSION }}"
          git push origin "v${{ steps.get_version.outputs.VERSION }}"
          echo "TAG_CREATED=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}

  build:
    name: Build
    needs: tag-and-release
    if: needs.tag-and-release.outputs.tag_created == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: busycrab
            asset_name: busycrab-linux
          - os: windows-latest
            artifact_name: busycrab.exe
            asset_name: busycrab-windows.exe
          - os: macos-latest
            artifact_name: busycrab
            asset_name: busycrab-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.tag-and-release.outputs.version }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxdo-dev libx11-dev libxtst-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build
        run: cargo build --release

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/release/${{ matrix.artifact_name }}
          retention-days: 1

  release:
    name: Create Release
    needs: [tag-and-release, build]
    if: needs.tag-and-release.outputs.tag_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.tag-and-release.outputs.version }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Rename artifacts for release
        run: |
          mv artifacts/busycrab-linux/busycrab artifacts/busycrab-linux/busycrab-linux-${{ needs.tag-and-release.outputs.version }}
          mv artifacts/busycrab-macos/busycrab artifacts/busycrab-macos/busycrab-macos-${{ needs.tag-and-release.outputs.version }}
          mv artifacts/busycrab-windows.exe/busycrab.exe artifacts/busycrab-windows.exe/busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe

      - name: Create Windows zip file
        run: |
          cd artifacts/busycrab-windows.exe
          # Create a simple README for the zip file
          cat > README.txt << 'EOF'
          ðŸ¦€ BusyCrab v${{ needs.tag-and-release.outputs.version }}
          
          A Rust utility that prevents sleep and fakes activity to keep your status green.
          
          USAGE:
          - Double-click busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe to run with default settings
          - Or open Command Prompt/PowerShell and run: .\busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe --help
          
          EXAMPLES:
          .\busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe --motion matrix --interval 30
          .\busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe --motion crab --verbose
          
          Press Ctrl+C to exit the program.
          
          For more information, visit: https://github.com/guinetik/busycrab
          EOF
          # Create the zip file with both the executable and README
          zip busycrab-windows-${{ needs.tag-and-release.outputs.version }}.zip busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe README.txt

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.tag-and-release.outputs.version }}
          name: BusyCrab v${{ needs.tag-and-release.outputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/busycrab-linux/busycrab-linux-${{ needs.tag-and-release.outputs.version }}
            artifacts/busycrab-windows.exe/busycrab-windows-${{ needs.tag-and-release.outputs.version }}.exe
            artifacts/busycrab-windows.exe/busycrab-windows-${{ needs.tag-and-release.outputs.version }}.zip
            artifacts/busycrab-macos/busycrab-macos-${{ needs.tag-and-release.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}